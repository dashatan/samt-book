{"version":3,"sources":["components/pages/ui/mobile/Lang.js","components/translate.js"],"names":["connect","state","lang","useLocation","useState","loading","setLoading","color","position","style","width","translate","label","value","map","language","key","button","onClick","localStorage","setItem","window","location","href","redirectPath","origin","id","open","text","Store","getState","locale"],"mappings":"kPAwEeA,uBAhES,SAACC,GACvB,MAAO,CACLC,KAAMD,EAAMC,QA8DDF,EA1Df,WAAiB,IACVC,EAASE,cAATF,MADS,EAEcG,oBAAS,GAFvB,mBAETC,EAFS,KAEAC,EAFA,KAwBd,OACE,6BACE,kBAAC,IAAD,CAAQC,MAAM,UAAUC,SAAS,SAASC,MAAO,CAACC,MAAO,SACvD,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAaC,YAAU,mIAG3B,kBAAC,IAAD,KAfY,CACd,CAACC,MAAO,iCAASC,MAAO,MACxB,CAACD,MAAO,UAAWC,MAAO,MAC1B,CAACD,MAAO,eAAUC,MAAO,MACzB,CAACD,MAAO,qBAAOC,MAAO,MACtB,CAACD,MAAO,6CAAWC,MAAO,MAC1B,CAACD,MAAO,2BAAQC,MAAO,OAURC,KAAI,SAACC,EAAUC,GACxB,OACE,yBAAKA,IAAKA,GACR,kBAAC,IAAD,CACEC,QAAM,EAACC,QAAS,WAhC9B,IAAqBhB,IAiCKa,EAhCxBT,GAAW,GACXa,aAAaC,QAAQ,OAAQlB,EAAKW,OAClCP,GAAW,GAGTe,OAAOC,SAASC,KADdtB,EACqBA,EAAMuB,aAENH,OAAOC,SAASG,SA4B7B,kBAAC,IAAD,CAAcC,GAAIX,EAASF,OACzB,kBAAC,IAAD,KACGE,EAASH,SAIhB,kBAAC,IAAD,WAKR,kBAAC,IAAD,CAAUe,KAAMtB,GACd,kBAAC,IAAD,Y,gCClER,8CAEe,SAASM,EAAUiB,GAC9B,OAAIC,IAAMC,WAAWC,QAAUF,IAAMC,WAAWC,OAAOH,GAC5CC,IAAMC,WAAWC,OAAOH,GAExBA","file":"static/js/8.f4b6ffcb.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport translate from \"../../../translate\";\nimport {AppBar, Backdrop, CircularProgress, List, ListItem, ListItemText, Toolbar} from \"@material-ui/core\";\nimport Divider from \"@material-ui/core/Divider\";\nimport {useLocation} from \"react-router-dom\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {connect} from \"react-redux\";\n\nconst mapStateToProps = (state) => {\n  return {\n    lang: state.lang,\n  }\n};\n\nfunction Lang() {\n  let {state} = useLocation();\n  let [loading, setLoading] = useState(false);\n\n  function handleClick(lang) {\n    setLoading(true);\n    localStorage.setItem('lang', lang.value);\n    setLoading(false);\n\n    if (state) {\n      window.location.href = state.redirectPath;\n    } else {\n      window.location.href = window.location.origin;\n    }\n  }\n\n  let languages = [\n    {label: \"فارسی\", value: \"fa\"},\n    {label: \"English\", value: \"en\"},\n    {label: \"türkçe\", value: \"tu\"},\n    {label: \"中國人\", value: \"ch\"},\n    {label: \"русский\", value: \"ru\"},\n    {label: \"اردو\", value: \"ur\"},\n  ];\n  return (\n    <div>\n      <AppBar color=\"inherit\" position=\"static\" style={{width: '100%'}}>\n        <Toolbar>\n          <Typography>{translate(\"لطفا زبان را انتخاب کنید\")}</Typography>\n        </Toolbar>\n      </AppBar>\n      <List>\n        {languages.map((language, key) => {\n          return (\n            <div key={key}>\n              <ListItem\n                button onClick={() => {\n                handleClick(language)\n              }}\n              >\n                <ListItemText id={language.value}>\n                  <Typography>\n                    {language.label}\n                  </Typography>\n                </ListItemText>\n              </ListItem>\n              <Divider/>\n            </div>\n          );\n        })}\n      </List>\n      <Backdrop open={loading}>\n        <CircularProgress/>\n      </Backdrop>\n    </div>\n  );\n}\n\nexport default connect(mapStateToProps)(Lang);\n","import Store from \"./redux/store\";\n\nexport default function translate(text) {\n    if (Store.getState().locale && Store.getState().locale[text]) {\n        return Store.getState().locale[text];\n    } else {\n        return text;\n    }\n}\n"],"sourceRoot":""}